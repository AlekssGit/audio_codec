--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=13 LPM_WIDTH=4 data eq
--VERSION_BEGIN 19.1 cbx_cycloneii 2019:09:22:11:00:28:SJ cbx_lpm_add_sub 2019:09:22:11:00:28:SJ cbx_lpm_compare 2019:09:22:11:00:28:SJ cbx_lpm_decode 2019:09:22:11:00:28:SJ cbx_mgl 2019:09:22:11:02:15:SJ cbx_nadder 2019:09:22:11:00:28:SJ cbx_stratix 2019:09:22:11:00:28:SJ cbx_stratixii 2019:09:22:11:00:28:SJ  VERSION_END


-- Copyright (C) 2019  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 16 
SUBDESIGN decode_1aa
( 
	data[3..0]	:	input;
	eq[12..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[12..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode1006w[3..0]	: WIRE;
	w_anode1016w[3..0]	: WIRE;
	w_anode1026w[3..0]	: WIRE;
	w_anode868w[3..0]	: WIRE;
	w_anode885w[3..0]	: WIRE;
	w_anode895w[3..0]	: WIRE;
	w_anode905w[3..0]	: WIRE;
	w_anode915w[3..0]	: WIRE;
	w_anode925w[3..0]	: WIRE;
	w_anode935w[3..0]	: WIRE;
	w_anode945w[3..0]	: WIRE;
	w_anode955w[3..0]	: WIRE;
	w_anode966w[3..0]	: WIRE;
	w_anode976w[3..0]	: WIRE;
	w_anode986w[3..0]	: WIRE;
	w_anode996w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[4..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode945w[3..3], w_anode935w[3..3], w_anode925w[3..3], w_anode915w[3..3], w_anode905w[3..3], w_anode895w[3..3], w_anode885w[3..3], w_anode868w[3..3]);
	eq_wire2w[] = ( w_anode1026w[3..3], w_anode1016w[3..3], w_anode1006w[3..3], w_anode996w[3..3], w_anode986w[3..3], w_anode976w[3..3], w_anode966w[3..3], w_anode955w[3..3]);
	w_anode1006w[] = ( (w_anode1006w[2..2] & data_wire[2..2]), (w_anode1006w[1..1] & (! data_wire[1..1])), (w_anode1006w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1016w[] = ( (w_anode1016w[2..2] & data_wire[2..2]), (w_anode1016w[1..1] & data_wire[1..1]), (w_anode1016w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1026w[] = ( (w_anode1026w[2..2] & data_wire[2..2]), (w_anode1026w[1..1] & data_wire[1..1]), (w_anode1026w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode868w[] = ( (w_anode868w[2..2] & (! data_wire[2..2])), (w_anode868w[1..1] & (! data_wire[1..1])), (w_anode868w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode885w[] = ( (w_anode885w[2..2] & (! data_wire[2..2])), (w_anode885w[1..1] & (! data_wire[1..1])), (w_anode885w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode895w[] = ( (w_anode895w[2..2] & (! data_wire[2..2])), (w_anode895w[1..1] & data_wire[1..1]), (w_anode895w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode905w[] = ( (w_anode905w[2..2] & (! data_wire[2..2])), (w_anode905w[1..1] & data_wire[1..1]), (w_anode905w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode915w[] = ( (w_anode915w[2..2] & data_wire[2..2]), (w_anode915w[1..1] & (! data_wire[1..1])), (w_anode915w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode925w[] = ( (w_anode925w[2..2] & data_wire[2..2]), (w_anode925w[1..1] & (! data_wire[1..1])), (w_anode925w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode935w[] = ( (w_anode935w[2..2] & data_wire[2..2]), (w_anode935w[1..1] & data_wire[1..1]), (w_anode935w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode945w[] = ( (w_anode945w[2..2] & data_wire[2..2]), (w_anode945w[1..1] & data_wire[1..1]), (w_anode945w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode955w[] = ( (w_anode955w[2..2] & (! data_wire[2..2])), (w_anode955w[1..1] & (! data_wire[1..1])), (w_anode955w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode966w[] = ( (w_anode966w[2..2] & (! data_wire[2..2])), (w_anode966w[1..1] & (! data_wire[1..1])), (w_anode966w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode976w[] = ( (w_anode976w[2..2] & (! data_wire[2..2])), (w_anode976w[1..1] & data_wire[1..1]), (w_anode976w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode986w[] = ( (w_anode986w[2..2] & (! data_wire[2..2])), (w_anode986w[1..1] & data_wire[1..1]), (w_anode986w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode996w[] = ( (w_anode996w[2..2] & data_wire[2..2]), (w_anode996w[1..1] & (! data_wire[1..1])), (w_anode996w[0..0] & (! data_wire[0..0])), enable_wire2);
END;
--VALID FILE
